<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EasySslStream</name>
    </assembly>
    <members>
        <member name="T:EasySslStream.Abstraction.CertGenClassesParent">
             <summary>
             Parent class for certificate generation
            
             </summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CAKeyLength">
            <summary>Contains name of hash algorithm for CA </summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CAdays">
            <summary>Contains length or RSA keys </summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CACountry">
            <summary>amount of days from now for which the certificate will be valid </summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CAState">
            <summary>amount of days from now for which the certificate will be valid </summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CALocation">
            <summary>Region, State etc.</summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CAOrganisation">
            <summary>Locality, City etc</summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CACommonName">
            <summary>Organisation of CA</summary>
        </member>
        <member name="F:EasySslStream.Abstraction.CertGenClassesParent.CAGenerationEncoding">
            <summary>Common name of CA certificate</summary>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.#ctor">
            <summary>Encoding of certificate fields</summary>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.GenerateCA(System.String)">
            <summary>
            Base function of parent for generating CA cert
            </summary>
            <param name="OutputPath">Path for CA.crt,CA.key out</param>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.GenerateCA_Async(System.String)">
            <summary>
            Base function of parent for generating CA cert
            </summary>
            <param name="OutputPath">Path for CA.crt,CA.key out</param>
            <returns>Task object for await</returns>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.GenerateCSR(EasySslStream.CSRConfiguration,System.String)">
            <summary>
            Base function for generating csr
            </summary>
            <param name="config">CSRConfiguration class instance with configuration</param>
            <param name="OutputPath">path for .csr and .key</param>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.GenerateCSRAsync(EasySslStream.CSRConfiguration,System.String)">
            <summary>
            Base function for generating csr
            </summary>
            <param name="config">CSRConfiguration class instance with configuration</param>
            <param name="OutputPath">path for .csr and .key</param>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.SignCSR(EasySslStream.SignCSRConfig,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Base of SignCsr function
            </summary>
            <param name="config">Instance of config class</param>
            <param name="CSRpath">Path to csr file</param>
            <param name="CAPath">Path to CA certificate</param>
            <param name="CAKeyPath">Path to CA private key</param>
            <param name="CertName">Name of new Certificate</param>
            <param name="Outputpath">Output path for new certificate</param>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.SignCSRAsync(EasySslStream.SignCSRConfig,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Base of SignCsr function
            </summary>
            <param name="config">Instance of config class</param>
            <param name="CSRpath">Path to csr file</param>
            <param name="CAPath">Path to CA certificate</param>
            <param name="CAKeyPath">Path to CA private key</param>
            <param name="CertName">Name of new Certificate</param>
            <param name="Outputpath">Output path for new certificate</param>
            <returns>Task object that indicates task completion </returns>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.ConvertX509ToPfx(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Base for converting x509 cert to pfx function
            </summary>
            <param name="Certpath"></param>
            <param name="KeyPath"></param>
            <param name="Password"></param>
            <param name="Certname"></param>
            <param name="OutputPath"></param>
        </member>
        <member name="M:EasySslStream.Abstraction.CertGenClassesParent.ConvertX509ToPfxAsync(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Base for converting x509 cert to pfx function
            </summary>
            <param name="Certpath"></param>
            <param name="KeyPath"></param>
            <param name="Password"></param>
            <param name="Certname"></param>
            <param name="OutputPath"></param>
            <returns> Task object that indicates task completion</returns>
        </member>
        <member name="T:EasySslStream.SignCSRConfig">
            <summary>
            Class that contains configuration for CSR signing with OpenSSL
            </summary>
        </member>
        <member name="M:EasySslStream.SignCSRConfig.SetDefaultConfig(EasySslStream.SignCSRConfig.DefaultConfigs)">
            <summary>
            Sets default configuration values of CSR signing to specified type.
            </summary>
            <param name="conf"></param>
        </member>
        <member name="M:EasySslStream.CertGenerationClasses.OpensslCertGeneration.GenerateCA_Async(System.String)">
            <summary>
            Asynchronously Creates x509 CA certificate, based on ca configuration from DynamicConfiguration Class
            </summary>
            <param name="OutputPath">Path where CA.crt, CA.key should appear</param>
            <returns></returns>
        </member>
        <member name="M:EasySslStream.CertGenerationClasses.OpensslCertGeneration.GenerateCA(System.String)">
            <summary>
            Creates x509 CA certificate, based on ca configuration from DynamicConfiguration Class
            </summary>
            <param name="OutputPath">Path where CA.crt, CA.key should appear</param>
        </member>
        <member name="M:EasySslStream.CertGenerationClasses.OpensslCertGeneration.GenerateCSR(EasySslStream.CSRConfiguration,System.String)">
            <summary>
            Generates csr based on settings from CSRConfiguration class
            </summary>
            <param name="config">Instance of CSRConfiguration class that contains configuration</param>
            <param name="OutputPath">Output path</param>
        </member>
        <member name="M:EasySslStream.CertGenerationClasses.OpensslCertGeneration.GenerateCSRAsync(EasySslStream.CSRConfiguration,System.String)">
            <summary>
            Asynchronously generates csr based on settings from CSRConfiguration class
            </summary>
            <param name="config">Instance of CSRConfiguration class that contains configuration</param>
            <param name="OutputPath">Output path</param>
            <returns>Task object that indicates task completion</returns>
        </member>
        <member name="M:EasySslStream.CertGenerationClasses.OpensslCertGeneration.SignCSR(EasySslStream.SignCSRConfig,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Signs certificate signing request
            </summary>
            <param name="config"></param>
            <param name="CSRpath"></param>
            <param name="CAPath"></param>
            <param name="CAKeyPath"></param>
            <param name="CertName"></param>
            <param name="OutputPath"></param>
        </member>
        <member name="M:EasySslStream.CertGenerationClasses.OpensslCertGeneration.SignCSRAsync(EasySslStream.SignCSRConfig,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Asynchrounously signs certificate signing request
            </summary>
            <param name="config"></param>
            <param name="CSRpath"></param>
            <param name="CAPath"></param>
            <param name="CAKeyPath"></param>
            <param name="CertName"></param>
            <param name="OutputPath"></param>
            <returns></returns>
        </member>
        <member name="T:EasySslStream.DebugLocalVariableEventRaised">
            <summary>
            Event that fires when debug message is raised
            </summary>
        </member>
        <member name="T:EasySslStream.DynamicConfiguration">
            <summary>
            Contains configuration values
            </summary>
        </member>
        <member name="F:EasySslStream.DynamicConfiguration.CA_CONFIG">
            <summary>
            Contains configuration for CA certificate generation
            </summary>
        </member>
        <member name="F:EasySslStream.DynamicConfiguration.OpenSSl_config">
            <summary>
            Contains configuration 
            </summary>
        </member>
        <member name="F:EasySslStream.DynamicConfiguration.TransportBufferSize">
            <summary>
            Buffer size for sending files / large Messages. Smaller buffer = higher cpu load, smaller probability of fail
            Bigger buffer = lower cpu load, bigger probability of fail
            </summary>
        </member>
        <member name="T:EasySslStream.DynamicConfiguration.DEBUG_MODE">
            <summary>
            Debug modes
            </summary>
        </member>
        <member name="T:EasySslStream.DynamicConfiguration.SSL_Certgen_mode">
            <summary>
            Method of certificate generation
            </summary>
        </member>
        <member name="P:EasySslStream.DynamicConfiguration.Certgen_Mode">
            <summary>
            Mode of generating certificates
            </summary>
        </member>
        <member name="F:EasySslStream.DynamicConfiguration.DEBUG">
            <summary>
            True - Lib will try to output debug Messages through specified 
            </summary>
        </member>
        <member name="F:EasySslStream.DynamicConfiguration.debug_message">
            <summary>
            Latest debug message
            </summary>
        </member>
        <member name="F:EasySslStream.DynamicConfiguration.debug_title">
            <summary>
            Latest debug message title
            </summary>
        </member>
        <member name="E:EasySslStream.DynamicConfiguration.DebugLocalVariableEvent">
            <summary>
            Event that fires when debug message is changed
            </summary>
        </member>
        <member name="M:EasySslStream.DynamicConfiguration.EnableDebugMode(EasySslStream.DynamicConfiguration.DEBUG_MODE)">
            <summary>
            Enables debug mode
            </summary>
            <param name="mode">Optional parameter - By default debug will show by Console.WriteLine, it can be changed here</param>
        </member>
        <member name="T:EasySslStream.Connection.CertificateCheckSettings">
            <summary>
            Containts settings for certificate verification
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.HandleReceivedText">
            <summary>
            Action Delegate for handling text data received from client, by default it prints message by Console.WriteLine()
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.HandleReceivedBytes">
            <summary>
            Action Delegate for handling bytes received from client, by default it prints int representation of them in console
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.VerifyCertificateName">
            <summary>
            True if server hostname must match subject name on the certificate. True by default
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.VerifyCertificateChain">
            <summary>
            True if certificate sign chain should be valid, True by default
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.FilenameEncoding">
            <summary>
            Encoding of filenames UTF8 is default
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.TextReceiveEncoding">
            <summary>
            Encoding of received text from server, UTF8 is default
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Client.ReceivedFilesLocation">
            <summary>
            Location of the received files
            </summary>
        </member>
        <member name="M:EasySslStream.Connection.Full.Client.Disconnect">
            <summary>
            Disconnects from the server, disposes client's sslstream
            </summary>
        </member>
        <member name="M:EasySslStream.Connection.Full.Client.Connect(System.String,System.Int32)">
            <summary>
            Connects to the server
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Client.Connect(System.String,System.Int32,System.String,System.String)">
            <summary>
            Connects to the server that verifies client certificates
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="clientCertLocation">path to the client pfx cert with private key</param>
            <param name="certPassword">Password to the cert, use empty string if there is no password</param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Client.WriteText(System.Byte[])">
            <summary>
            Send byte array representation of string to server
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Client.SendFile(System.String)">
            <summary>
            Sends file to server
            </summary>
            <param name="path">Path to the file</param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Client.SendRawBytes(System.Byte[])">
            <summary>
            Sends raw bytes message 
            </summary>
            <param name="Message">bytes to send</param>
        </member>
        <member name="T:EasySslStream.Connection.Full.Server">
            <summary>
            Server class that can handle multiple clients
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.ConnectedClients">
            <summary>
            List that contains connected clients 
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.ConnectedClientsByNumber">
            <summary>
            Thread safe dictionary that contains connected clients referenced by int
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.ConnectedClientsByEndPoint">
            <summary>
            Thread safe dictionary that contains connected clients referenced by string endpoint ( 127.0.0.1:5000 etc)
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.TextReceiveEncoding">
            <summary>
            Encoding for text messages
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.FileNameEncoding">
            <summary>
            Encoding for filenames
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.CertificateCheckSettings">
            <summary>
            Specifies how certificate verification should behave
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.HandleReceivedText">
            <summary>
            Action Delegate for handling text data received from client, by default it prints message by Console.WriteLine()
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.HandleReceivedBytes">
            <summary>
            Action Delegate for handling bytes received from client, by default it prints int representation of them in console
            </summary>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.StopServer">
            <summary>
            Disposes all connected clients and stops server from listening
            </summary>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.WriteTextToClient(System.Net.IPEndPoint,System.Byte[])">
            <summary>
            Sends text Message to client
            </summary>
            <param name="clientEndpoint">Client endpoint</param>
            <param name="Message">byte array representation of the message</param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.WriteTextToClient(System.Int32,System.Byte[])">
            <summary>
            Sends text Message to client
            </summary>
            <param name="ConnectionID"></param>
            <param name="Message"></param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.WriteFileToClient(System.Int32,System.String)">
            <summary>
            Sends file to client
            </summary>
            <param name="ConnectionID">Id of connection</param>
            <param name="Path">path to the file to send</param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.WriteFileToClient(System.Net.IPEndPoint,System.String)">
            <summary>
            Sends file to client
            </summary>
            <param name="clientEndpoint">client endpoint</param>
            <param name="Path">path to the file to send</param>
        </member>
        <member name="F:EasySslStream.Connection.Full.Server.ReceivedFilesLocation">
            <summary>
            Location for the received file from clients
            </summary>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.StartServer(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Starts server
            </summary>
            <param name="ListenOnIp">Listening ip</param>
            <param name="port">Listening port</param>
            <param name="ServerPFXCertificatePath">Path to the Certificate with private key in pfx format</param>
            <param name="CertPassword">Password to the certificate use empty string if there's no password</param>
            <param name="VerifyClients">Set true if server is meant to check for client certificate, otherwise set false</param>
        </member>
        <member name="M:EasySslStream.Connection.Full.Server.StartServer(System.Net.IPAddress,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Starts server
            </summary>
            <param name="ListenOnIp">Listening ip</param>
            <param name="port">Listening port</param>
            <param name="ServerPFXCertificatePath">Path to the Certificate with private key in pfx format</param>
            <param name="CertPassword">Password to the certificate use empty string if there's no password</param>
            <param name="VerifyClients">Set true if server is meant to check for client certificate, otherwise set false</param>
        </member>
        <member name="T:EasySslStream.Connection.Full.SSLClient">
            <summary>
            Represents connected client 
            </summary>
        </member>
        <member name="F:EasySslStream.Connection.Full.SSLClient.FilenameEncoding">
            <summary>
            Encoding for filenames, UTF8 by default
            </summary>
        </member>
        <member name="M:EasySslStream.Connection.Full.SSLClient.#ctor(System.Net.Sockets.TcpClient,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean,EasySslStream.Connection.Full.Server)">
            <summary>
            Creates client instance
            </summary>
            <param name="client">Tcpclient instance</param>
            <param name="serverCert">Server certificate</param>
            <param name="VerifyClients"></param>
            <param name="srvinstance"></param>
        </member>
        <member name="M:EasySslStream.Connection.Full.SSLClient.SendRawBytes(System.Byte[])">
            <summary>
            Sends raw bytes to the client
            </summary>
            <param name="Message"></param>
        </member>
        <member name="M:EasySslStream.Connection.Full.SSLClient.WriteText(System.Byte[])">
            <summary>
            Writes text(byte arrayof the text) to client
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:EasySslStream.Connection.Full.SSLClient.SendFile(System.String)">
            <summary>
            Sends file to client
            </summary>
            <param name="path">Path to the file</param>
        </member>
        <member name="T:EasySslStream.Interop.User32">
            <summary>
            Contains functions invoked from User32.dll
            </summary>
        </member>
        <member name="T:EasySslStream.Misc.Misc">
            <summary>
            Miscellaneous methods
            </summary>
        </member>
    </members>
</doc>
